Структура проекта:
Основной класс - Main. В его методе создаётся экземпляр класса Shell,
выводится приглашение << пользователю ввести команду, и в цикле считываются строчки. После этого, если строка введена корректно, она отдаётся
на обработку(с помощью Tokenizer). 

Shell: хранит контекст в качестве поля, в Shell же прописан поиск внешней команды, обработка строки и отправка команды на выполнение. 

Tokenizer: 
Распознает, что происходит в строке, которую нам передали на обработку. Если в строке происходит присваивание, то переменная добавляется в контекст. Если же происходит вызов команды, то сначала ее пытаются вызвать среди команд Shell-a, а затем запускается внешний поиск. Здесь же происходит обработка сильного и слабого цитирования.

Context:
Хранит набор переменных для текущего инстанса Shell, отвечает на запросы вида "поиск переменной в контексте", "добавление в контекст", "выдача значения переменной по имени"

Команды:
 все команды наследуются от общего интерфейса Command, что позволяет хранить их в списке для упрощения обработки. Каждая команда представлена отдельным классом, при этом у каждой команды есть две версии методов: execute для простого выполнения, а также pipedExecute, который позволяет выполнять команды по очереди. Соответственно, для добавления новой команды нужно сделать две вещи: определить класс, реализующий интерфейс Command, и добавить создание экземпляра новой команды в конструкторе Shell

Исключения:
Все классы исключений хранятся в папке Exceptions: ContextException, ExitException, Shell Exception, ShellRuntimeException и WrongInputCommandException. 

